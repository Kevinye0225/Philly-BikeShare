*PROJECT NAME: Bike Philly*TEAM MEMBERS: Xuye LIN; Yufei YE*BRIEF DESCRIPTION: ‘Bike Philly’ is an android application that takes in user's geographical location and shows nearby Indego bike stations, as well as key information about each station. The application is based on the Indego bike network data released by the City of Philadelphia. This application is built using Android Studio 1.5.*WORK BREAKDOWN: We've tried to evenly distribute the workload between two members. Since developing android application is new for both of us, we had to constantly adjust the assignments according to new challenges. Some changes have been made since we submitted the project proposal. Initially Xuye was assigned to work on data and Yufei was to build the app. Then we realized that for this app the processing of data cannot be separated from the actual building of the app. Also the Google Maps Android Utility Library has made our work with data a lot easier. Another thing we didn't think of is that tesing in Android Studio is very different from in Eclipse. We had just as much to learn about Android application testing as about building.The eventual breakdown of the work is as follows:Xuye LIN: 	Getting user location and initializing the map	Adding markers as stations on the map and info windows of markers	Implementing function of 'REFRESH' button	Writing project summary and user manualYufei YE:	Adding the toolbar and its features	Adding the 'Made by' page as a new activity	Setting up and Performing testing on the app	Adding launch icon	Writing project proposalBoth members contributed to the design of UI*GITHUB REPO LINK: https://github.com/cit-upenn/hw5-project-bikeshare*DETAILS:1. Getting user's last known locationThe application requests for user's geographical location data using Google Play Location Services API. On creation of main activity, a Google Play Services API client is created and then connected to Google Play services. Once it is connected, the device's location data can be retrieved using .FusedLocationApi.getLastLocation method. Data of user's last known location is required for setting the camera view for main activity. When user opens the app, the camera view is always set to the device's geographical location with a zoom level of 14. The user's location appears as a blue dot on the map.2. Accessing APIFor this project, we are using 'Bike Share Stations' API from opendataphilly.org, released by the City of Philadelphia. The API is a JSON file but particularly in GeoJSON format, which is a format for encoding geographic data structures. In Eclipse, the API must be accessed via User-Agent. In Android Studio, it can be accessed directly as a URL. However, Android prohibits performing network operations in the main thread as the operation might cause delay, resulting in poor user experience. Therefore a different thread must be created away from main thread to access the API in the background. This is done in the AsyncTask subclass DownloadGeoJsonFile. Once the Google Play Services API client is connected and invokes the onConnected method, inside onConnected, we call startdemo method to create an instance of the subclass DownloadGeoJsonFile. From there we access the API and begin processing the data.3. Processing dataIn the AsyncTask subclass, the contents of the API is downloaded as an InputStream, which is later converted to a string and then a new JSON object ‘json'.For the processing of data, we have referred to Google Maps Android Utility Library, which includes a demo app. The demo app displays several advanced features including adding GeoJSON layers. Google Maps Android Utility Library provides methods for rendering GeoJSON data as a layer of markers on top of the map. This saves us the trouble of adding each marker mannually.We modified features of markers, for example, color and info windows. In our code this is realized in .addInfoToMakrkers method. The bike station features that are of most importance to users are 1)station address 2)number of bikes available and 2)number of docks available. In .addInfoToMarkers method, we've made the above information available in the markers' info window.4. The toolbarSince the 'Bike Share Station' API is real-time data, it is also important for the information we provide to be up-to-date. Therefore we added a 'REFRESH' feature in the tool bar. Each time the 'REFRESH' button is clicked, Google Play Services API client is disconnected and reconnected. And we are back to onConnected method where everything starts. Both the camera view and bike station info will be updated.Another feature of the toolbar is the 'Made by' page. This page includes information about the app's developers and credit to other contributors. Since this app is for Indego bike network users, we also provided a link to rideindego.com. 5. About designSince we are new to Android Studio, our goal was mainly to realize the functionality and we gave less consideration to the design of the code. In each step our major concern was whether the code would compile and whether the application would run properly. Once the code worked, we were very cautious about making changes. Initially, the main part of the function(showing markers on the map) was written in two separate classes. One was MapsActivity and the other was BikeStationsData. Having them in different classes makes sense since one handles the bike network data and the other contains the map fragment. Normally in java each class's features should support the single concept the class represents. We knew it would be a terrible idea to have everything in one class. However, when coding in Android Studio, relations between classes could get complicated.For example, when we tried to create an instance of BikeStationsData in MapsActivity and call its method, the code compiled but on the device the program would crash. Another thing is, each class is also potentially an Activity. With two classes we had to decide which one should be the main Activity. This was worsened by the fact that we also had to connect to the Google Play Services API in the main Activity and use its return data to set the camera view. At last we decided to put everything in one class. This undermines the code's readability but it makes everything less complicated. 6. TestingTo run unit testing, select build variants on the left bar, under test artifact, select unit test. Then go to project, the test is in app->java->com.example.karin.googlemaps(test). MadebyTest is used to test Madeby class, which creates the app info page. NewTest is used to test MapsActivity class, which is the main activity page. There is no algorithm in the class, so the test cases are built on testing whether the variables are NULL or not, and whether the views appear properly on the screen.